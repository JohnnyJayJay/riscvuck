.text

# perform 1-byte read from stdin/write to stdout.
# a0=0 => read, a0=1 => write, a1=byte to write.
io:
    addi sp, sp, -1 # allocate one byte on stack
    li a7, 63 # read syscall
    add a7, a7, a0 # a0 is either 0 or 1, so the syscall either doesn't change or changes to write
    sb a1, (sp) # store a1 in the stack byte in case this is a write
    mv a1, sp # buffer address: beginning of newly allocated byte
    li a2, 1 # read/write 1 byte
    ecall
    mv a1, a0 # return status as a1 (-1, 0 or 1)
    lb a0, (sp) # return read/written byte as a0
    addi sp, sp, 1 # free stack byte
    jr ra


# s0 = base address of the array containing the instructions
# s1 = cell pointer
# s2 = current instruction offset
# s3 = input file descriptor
# s4 = input length (instruction count)
# s5 = open loop count
.globl _start
 _start:
 
    # open input file (first command line argument)
    li a7, 56
    li a0, -100 # open relative to working directory
    lw a1, 8(sp) # stack=argc,argv. doing this sets a1 to argv[1]
    li a2, 0x2000 # Open as read only
    li a3, 0 # mode doesn't matter
    ecall
    mv s3, a0
    # if returned descriptor is -1, go to error
    addi a0, a0, 1
    beqz a0, file_error
    
    # determine file length
    addi sp, sp, -8 # space for offset result
    li a7, 62 # llseek syscall
    mv a0, s3 # input file
    li a1, 0 # no high offset
    li a2, 0 # no low offset
    mv a3, sp
    li a4, 2 # SEEK_END
    ecall
    lw t0, (sp)
    lw t1, 4(sp)
    add s4, t0, t1 # file length => s4 
    beqz s4, success # if length is 0, we're done
    bltz s4, file_error # if length is < 0, the file is too big
    addi sp, sp, 8 # deallocate space for new offsets
    
    # memory map input file
    li a7, 222 # mmap
    li a0, 0 # addr=NULL
    mv a1, s4 # length=filesize
    li a2, 1 # PROT_READ
    li a3, 2 # MAP_PRIVATE
    mv a4, s3 # map the input file
    li a5, 0 # offset 0
    ecall
    bltz a0, mem_error
    
    mv s0, a0 # instructions address
    li s2, 0 # instruction offset
    
    # close file
    li a7, 57
    mv a0, s3
    ecall
 
    # Allocate brainfuck array
    li a7, 222 # mmap syscall
    li a0, 0 # addr = NULL => OS will select free address for us
    li a1, 0xffff
    slli a1, a1, 2 # 4 * 0xffff bytes
    li a2, 3 # PROT_READ | PROT_WRITE
    li a3, 34 # MAP_PRIVATE | MAP_ANONYMOUS
    li a4, -1 # file descriptor - ignored, but recommended to be -1
    li a5, 0 # offset - must be 0
    ecall
    bltz a0, mem_error
    mv s1, a0 # current cell address is available in s1
    
    li s5, 0 # open loop count
    
    interpret:
    beq s2, s4, loop_check # if instruction offset=instruction length, there is no more code
    add t1, s0, s2 # t1 = instruction base + instruction offset
    lb t1, (t1) # load instruction at t1
    
    li t0, '+' # '+'
    beq t1, t0, inc
    li t0, '-' # '-'
    beq t1, t0, dec
    li t0, '>' # '>'
    beq t1, t0, right
    li t0, '<' # '<'
    beq t1, t0, left
    li t0, '.' # '.'
    beq t1, t0, out
    li t0, ',' # ','
    beq t1, t0, in
    li t0, '[' # '['
    beq t1, t0, loop_open
    li t0, ']' # ']'
    beq t1, t0, loop_close
    
    j after
    
    inc: # load current cell value and increment it
    lw t1, (s1)
    addi t1, t1, 1
    sw t1, (s1)
    j after

    dec: # load current cell value and decrement it
    lw t1, (s1)
    addi t1, t1, -1
    sw t1, (s1)
    j after
    
    right: # increment cell pointer
    addi s1, s1, 4
    j after
    
    left: # decrement cell pointer
    addi s1, s1, -4
    j after
    
    out: # print current cell value
    li a0, 1 # this is a write...
    lw a1, (s1) # for the current cell value
    jal io
    j after
    
    in: # read into current cell
    li a0, 0 # this is a read
    jal io
    beqz a0, after # leave cell unchanged if EOF
    sw a0, (s1) # store read value
    j after
    
    loop_open:
    addi sp, sp, -4
    sw s2, (sp) # push instruction offset to stack
    addi s5, s5, 1 # one more open loop
    lw t1, (s1) # current cell value -> t1
    bnez t1, after # if current cell is not zero, continue reading
    
    li t0, '['
    li t1, ']'
    li t2, 1 # open brackets count
    # go over the following instructions, find the matching ]
    find_end:
    # next instruction -> t3
    addi s2, s2, 1 
    beq s2, s4, syntax_error # no more instructions means this loop wasn't closed => syntax error
    add t3, s0, s2 
    lb t3, (t3)
    
    bne t3, t1, if_open # if instruction is not a closing bracket, move to check if it's an opening bracket
    addi t2, t2, -1 # if it is a closing bracket, decrement open bracket count
    
    if_open:
    bne t3, t0, else # if instruction is not an opening bracket, continue search
    addi t2, t2, 1 # if it is opening, increment open bracket count
    
    else:
    bnez t2, find_end # if open bracket count is 0, the matching closing bracket has been found. if not, continue search
    # found the closing bracket
    addi sp, sp, 4 # remove [ instruction offset from stack
    addi s5, s5, -1 # loop is closed
    j after
    
    loop_close:
    blez s5, syntax_error # if there is no open loop, you can't close it => syntax error
    addi s5, s5, -1 # one less open loop now
    # jump back to loop beginning
    lw s2, (sp)
    addi s2, s2, -1 # reset instruction offset to that of the opening loop -1 (-1 because 1 is added at 'after')
    addi sp, sp, 4
    j after
    
    after:
    addi s2, s2, 1 # increment instruction offset
    j interpret
    
    # everything went great
    success: 
    li a0, 0
    j end
    
    # file/io error
    file_error:
    li a0, 1
    j end
    
    # syntax error (i.e. malformed loops)
    syntax_error:
    li a0, 2
    j end
    
    # error with memory mapping/allocation
    mem_error:
    li a0, 3
    j end
    
    # only exit(0) if brackets are balanced
    loop_check:
    li a0, 0
    beqz s5, end
    j syntax_error
    
    end:
    # exit
    li a7, 93
    ecall
    
    
